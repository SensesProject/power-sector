{"remainingRequest":"/Users/francescamorini/projects/power-sector/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/francescamorini/projects/power-sector/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/francescamorini/projects/power-sector/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/francescamorini/projects/power-sector/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/Users/francescamorini/projects/power-sector/src/App.vue","mtime":1586352564817},{"path":"/Users/francescamorini/projects/power-sector/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/power-sector/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/power-sector/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/power-sector/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IGF0dHJzOiB7IGlkOiAiYXBwIiB9IH0sCiAgICBbCiAgICAgIF9jKCJTZW5zZXNNZW51IiksCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsKICAgICAgICAgIHJlZjogImNvbnRhaW5lciIsCiAgICAgICAgICBzdGF0aWNDbGFzczogImNvbnRlbnQiLAogICAgICAgICAgY2xhc3M6IF92bS5tb2JpbGUgPyAiaXNNb2JpbGUiIDogImlzRGVza3RvcCIKICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF92bS5fbSgwKSwKICAgICAgICAgIF9jKCJSaXNrUGF0aHdheSIsIHsgYXR0cnM6IHsgbW9iaWxlOiBfdm0ubW9iaWxlIH0gfSksCiAgICAgICAgICBfdm0uX20oMSksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ2aXMtd3JhcHBlciIgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJTZWNvbmRhcnlFbmVyZ3kiLCB7CiAgICAgICAgICAgICAgICBhdHRyczogeyB3aWR0aDogX3ZtLndpZHRoLCBoZWlnaHQ6IF92bS5oZWlnaHQgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX20oMiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ2aXMtd3JhcHBlciIgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJFbWlDb3N0c1Jpc2siLCB7CiAgICAgICAgICAgICAgICBhdHRyczogeyB3aWR0aDogX3ZtLndpZHRoLCBoZWlnaHQ6IF92bS5oZWlnaHQgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX20oMyksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ2aXMtd3JhcHBlciIgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJTdHJ1Y3R1cmVSaXNrIiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsgd2lkdGg6IF92bS53aWR0aCwgaGVpZ2h0OiBfdm0uaGVpZ2h0IH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl9tKDQpLAogICAgICAgICAgX2MoIlNlbnNlc01ldGEiLCB7IGF0dHJzOiB7IGlkOiAicG93ZXItc2VjdG9yIiB9IH0pCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICkKICAgIF0sCiAgICAxCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRleHQtd3JhcHBlciIgfSwgWwogICAgICBfYygiaDEiLCB7IHN0YXRpY0NsYXNzOiAibW9kdWxlLXRpdGxlIiB9LCBbX3ZtLl92KCJQb3dlciBTZWN0b3IiKV0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhpcyBpcyB0aGUgZmlyc3QgY2hhcHRlciBvZiB0aGUgRmluYW5jZSBSaXNrcyBQYXRod2F5LiBZb3UgY2FuIHNlbGVjdCBhbm90aGVyIGNoYXB0ZXIgYmVsb3cuIgogICAgICAgICkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC13cmFwcGVyIiB9LCBbCiAgICAgIF9jKAogICAgICAgICJoMiIsCiAgICAgICAgeyBzdGF0aWNDbGFzczogImNoYXB0ZXItdGl0bGUiLCBhdHRyczogeyBpZDogImludHJvZHVjdGlvbiIgfSB9LAogICAgICAgIFtfdm0uX3YoIiBXaGF0IGtpbmQgb2Ygcmlza3MgYXJlIHdlIHRhbGtpbmcgYWJvdXQ/ICIpXQogICAgICApLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIHBvd2VyIHNlY3RvciBnb2VzIHRocm91Z2ggYSB0cmFuc2l0aW9uIGZyb20gbGFyZ2VseSBmb3NzaWwtYmFzZWQgcG93ZXIgcHJvZHVjdGlvbiB0byByZW5ld2FibGUgZWxlY3RyaWNpdHkgcHJvZHVjdGlvbi4oLi4uKSAtLS0tIEJlIGNhcmVmdWwgdG8gbWFrZSB0aGUgZGlzdGluY3Rpb24gY2xlYXIgYmV0d2VlbiBQcmltYXJ5IGFuZCBTZWNvbmRhcnksIOKAmEVsZWN0cmljaXR5IHByb2R1Y3Rpb27igJkgY291bGQgYmUgYSBnb29kIGxhYmVsaW5nLiAiCiAgICAgICAgKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXdyYXBwZXIiIH0sIFsKICAgICAgX2MoImgyIiwgeyBzdGF0aWNDbGFzczogImNoYXB0ZXItdGl0bGUiLCBhdHRyczogeyBpZDogImNvc3RzIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIiBFbWlzc2lvbnMgLSBDb3N0IFJpc2sgIikKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sIHF1aXMgbm9zdHJ1ZCBleGVyY2l0YXRpb24gdWxsYW1jbyBsYWJvcmlzIG5pc2kgdXQgYWxpcXVpcCBleCBlYSBjb21tb2RvIGNvbnNlcXVhdC4gRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgcGFyaWF0dXIuIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQsIHN1bnQgaW4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnQgbW9sbGl0IGFuaW0gaWQgZXN0IGxhYm9ydW0uIgogICAgICAgICkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC13cmFwcGVyIiB9LCBbCiAgICAgIF9jKCJoMiIsIHsgc3RhdGljQ2xhc3M6ICJjaGFwdGVyLXRpdGxlIiwgYXR0cnM6IHsgaWQ6ICJzdHJ1Y3R1cmUiIH0gfSwgWwogICAgICAgIF92bS5fdigiIENoYW5nZSBpbiBzdHJ1Y3R1cmUgcmlzayAiKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgcXVpcyBub3N0cnVkIGV4ZXJjaXRhdGlvbiB1bGxhbWNvIGxhYm9yaXMgbmlzaSB1dCBhbGlxdWlwIGV4IGVhIGNvbW1vZG8gY29uc2VxdWF0LiBEdWlzIGF1dGUgaXJ1cmUgZG9sb3IgaW4gcmVwcmVoZW5kZXJpdCBpbiB2b2x1cHRhdGUgdmVsaXQgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci4gRXhjZXB0ZXVyIHNpbnQgb2NjYWVjYXQgY3VwaWRhdGF0IG5vbiBwcm9pZGVudCwgc3VudCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXQgYW5pbSBpZCBlc3QgbGFib3J1bS4iCiAgICAgICAgKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJkaXYiLAogICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC13cmFwcGVyIiwgYXR0cnM6IHsgaWQ6ICJsYXN0LXRleHQiIH0gfSwKICAgICAgWwogICAgICAgIF9jKAogICAgICAgICAgImgyIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJjaGFwdGVyLXRpdGxlIiwgYXR0cnM6IHsgaWQ6ICJjb25jbHVzaW9uIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIgQ2hhbmdlIGluIHN0cnVjdHVyZSByaXNrICIpXQogICAgICAgICksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sIHF1aXMgbm9zdHJ1ZCBleGVyY2l0YXRpb24gdWxsYW1jbyBsYWJvcmlzIG5pc2kgdXQgYWxpcXVpcCBleCBlYSBjb21tb2RvIGNvbnNlcXVhdC4gRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgcGFyaWF0dXIuIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQsIHN1bnQgaW4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnQgbW9sbGl0IGFuaW0gaWQgZXN0IGxhYm9ydW0uIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0KICAgICkKICB9Cl0KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}